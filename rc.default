#long-mode#
bind section-command (
bind section-command [
bind section-command {
bind close-brace     }
bind close-bracket   ]
bind close-paren     )
bind read-reg        r
bind read-reg        $
bind write-reg       @
bind num-add         +
bind num-sub         -
bind num-mul         *
bind num-div         /
bind num-mod         %
bind num-slt         <
bind num-sgt         >
bind logical-or      |
bind logical-and     &
bind logical-not     !

bind if              i
bind false-coalesce  I
bind for-integer     f
bind for-int-print   F
bind for-each        e
bind for-each-print  E
bind while           w

ensemble-new         string-ops
bind string-ops      s
bind str-equ         =
bind str-ix          c
bind str-is          ~
ensemble-bind string-ops str-slt        <
ensemble-bind string-ops str-sgt        >
ensemble-bind string-ops str-str        s
ensemble-bind string-ops str-len        #
ensemble-bind string-ops str-toupper    U
ensemble-bind string-ops str-tolower    L
ensemble-bind string-ops str-totitle    T
ensemble-bind string-ops str-tosent     S
ensemble-bind string-ops str-tocamel    C
ensemble-bind string-ops str-topascal   P
ensemble-bind string-ops str-toscream   !
ensemble-bind string-ops str-tocstyle   _
ensemble-bind string-ops str-tocaspal   E
ensemble-bind string-ops str-tolisp     I
ensemble-bind string-ops str-tocobol    X

bind rx-match-inline R
bind rx-repl-inline  S

ensemble-new secondary-commands
bind secondary-commands x
ensemble-new secondary-numeric-ops
ensemble-bind secondary-commands secondary-numeric-ops n
ensemble-bind secondary-numeric-ops num-equ =
ensemble-new other-commands
ensemble-bind secondary-commands other-commands o
ensemble-bind other-commands logical-xor r
ensemble-bind secondary-commands lambda \
bind lambda λ

defun ch-escape(s) (
  default-tokeniser([\`$s`], {+e}))

defun tokfmt-csv {+_ld,t""e}
defun tokfmt-tcl {+!t""e-b()}
defun tokfmt-json {+!t""ed:d,-b()}

defun basename(f) (
  ignore R:([^/]+)/?$:$f
  $1)

defun parent-directory(f) (
  if (R:^/+[^/]+$:$f) {/}
  if (R:/+[^/]+/+?$:$f) $< {.}
)

defun file-extension(f) (
  ignore R:[^/]\.([^./]+)$:$f
  $1)

defun sort(ic) (
  if (< list-len($i) 2) $i (
    if (= {} $c) (@c{str-slt})
    @p list-ix($i, random(list-len($i)))
    @l list-filter[r](λ(x) call $c($x, $p), $i)
    @r list-filter[p](λ(x) call $c($p, $x), $r)
    @l call {sort} ($l, $c)
    @r call {sort} ($r, $c)
    list-flatten(list($l, $p, $r))
  )
)

defun trim-trailing-lf(s) (
  str-ix 0
    +0(if (= (str-ix -1 $s) (ch-escape({n})))
     {-2} {-1}) $s)
